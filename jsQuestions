//q1
class AncestralStories {
    constructor(length, moralLesson, ageGroup) {
      this.length = length;
      this.moralLesson = moralLesson;
      this.ageGroup = ageGroup;
    }
  }
  
  class Story extends AncestralStories {
    constructor(title, character, ageGroup, length) {
      super(length, null, ageGroup);
      this.title = title;
      this.character = character;
    }
  
    addedStories(story) {
      this.story = story;
    }
  }
  
  class StoryTeller {
    constructor(name, language) {
      this.name = name;
      this.language = language;
    }
  }
  
  class Translator {
    constructor(translateFromLanguage, translateToLanguage) {
      this.translateFromLanguage = translateFromLanguage;
      this.toLanguage = translateToLanguage;
    }
  }
  
  const story = new Story("The Lion King", 10, "Children", "5");
  const storyTeller = new StoryTeller("Don Makambo", "English");
  const translator = new Translator("Kiswahili", "English");
    console.log("Title:", story.title);
//q2
class Recipe{
    constructor(ingredients,preparationTime,cookingMethod,nutritionalInformation){
        this.ingredients=ingredients
        this.preparationTime=preparationTime
        this.cookingMethod=cookingMethod
        this.nutritionalInformation=nutritionalInformation
    }
    getOriginOfFood(){
        console.log(`${this.constructor.name},${this.origin}`)
    }

}
class MoroccanRecipe extends Recipe{
    origin="Morocco"
}
class EthiopianRecipe  extends Recipe{
    origin="Ethiopia"
}
class  NigerianRecipe extends Recipe{
    origin="Nigeria"

}

let recipe=new Recipe("Spice ,tomatoes ,onions " ,"1 hour and 40 minutes","steam", "strong bones")
console.log(recipe)

let morroccanRecipe=new MoroccanRecipe("garlic ,pepper,cheese", "2 hours 40 minutes","fry","smooth skin")
morroccanRecipe.getOriginOfFood()
console.log(morroccanRecipe)

let ethiopianRecipe=new EthiopianRecipe("Sugar, spice ,lemons" ,"3 hour and 40 minutes","steam","strong teeth")
ethiopianRecipe.getOriginOfFood()
console.log(ethiopianRecipe)

let nigerianRecipe=new NigerianRecipe("water,lemons,salad","4 hours 50 minutes","stir-fry","great eye-sight")
nigerianRecipe.getOriginOfFood()
console.log(nigerianRecipe)




class Species {
  constructor(diet, lifespan, migrationPatterns) {
    this.diet = diet;
    this.lifespan = lifespan;
    this.migrationPatterns = migrationPatterns;
  }
  
  getDiet() {
    return this.diet;
  }
  
  getLifespan() {
    return this.lifespan;
  }
  
  getMigrationPatterns() {
    return this.migrationPatterns;
  }
}

class Predator extends Species {
  constructor(diet, lifespan, migrationPatterns, huntingMethod) {
    super(diet, lifespan, migrationPatterns);
    this.huntingMethod = huntingMethod;
  }
  
  getHuntingMethod() {
    return this.huntingMethod;
  }
  
  hunt() {
    console.log("The predator is hunting using " + this.huntingMethod);
  }
  
  isHungry(hungerLevel) {
    if (hungerLevel > 7) {
      console.log("The predator is hungry and needs to hunt.");
      this.hunt();
    } else {
      console.log("The predator is not hungry right now.");
    }
  }
}

class Prey extends Species {
  constructor(diet, lifespan, migrationPatterns, hidingBehavior) {
    super(diet, lifespan, migrationPatterns);
    this.hidingBehavior = hidingBehavior;
  }
  
  getHidingBehavior() {
    return this.hidingBehavior;
  }
  
  hide() {
    console.log("The prey is hiding using " + this.hidingBehavior);
  }
  
  isSafe(isPredatorNearby) {
    if (isPredatorNearby) {
      console.log("The prey is not safe. It needs to hide.");
      this.hide();
    } else {
      console.log("The prey is safe for now.");
    }
  }
}

const lion = new Predator("Carnivore", 12, "Seasonal", "Ambush hunting");
const gazelle = new Prey("Herbivore", 8, "Seasonal", "Group hiding");

console.log(lion.getDiet());
console.log(gazelle.getLifespan());
console.log(lion.getHuntingMethod());
console.log(gazelle.getHidingBehavior());

lion.isHungry(8); 
gazelle.isSafe(true);


//q4
class MusicFestival {
  constructor() {
    this.artists = [];
    this.genre = ['hiphop', 'reggae', 'R&B', 'acoustic'];
    this.instruments = [];
    this.lineUp = [];
  }
}
class Stage extends MusicFestival {
  constructor() {
    super();
    this.lights = 'white';
    this.instrument = ['Drum', 'microphone'];
  }
  addToLineUp(musicType) {
    if (this.genre.includes(musicType)) {
      this.lineUp.push(musicType);
    } else {
      return 'This music type is not available';
    }
  }
  stageManagement() {
    if (this.genre == 'hip hop') {
      this.lights = 'Blue lights';
      return this.lights;
    } else if (this.genre == 'reggae') {
      this.lights = 'Green lights';
      return this.lights;
    } else if (this.genre == 'R&B') {
      this.lights = 'Bright lights';
      return this.lights;
    } else {
      return this.lights;
    }
  }
  instrumentAssign() {
    if (this.genre == 'hiphop') {
      this.instrument.push('bass');
      return this.instrument;
    } else if (this.genre == 'R&B') {
      this.instrument.push('saxophone');
      return this.instrument;
    } else if (this.genre == 'reggae') {
      this.instrument.push('lead');
      return this.instrument;
    } else {
      return this.instrument;
    }
  }
}
const festival = new MusicFestival();
const stage = new Stage();
stage.addToLineUp('hiphop');
stage.addToLineUp('reggae');
console.log(stage.lineUp);
console.log(stage.stageManagement());
console.log(stage.instrumentAssign());

//q5
class Product{
  constructor(name,price,quantity){
    this.name=name
    this.price=price
    this.quantity=quantity
  }
  calculateTotalValue(){
    let totalValue = 0
    if(this.name && this.price && this.quantity){
      totalValue = this.price * this.quantity
      return totalValue
    }
    else {
      return null
    }
  }
}
const product1 = new Product("Apples", 0.5, 10);
const product2 = new Product("Bananas", 0.3, 15);
const product3 = new Product("Oranges", 0.4, 8);
console.log(`Total value of ${product1.name}: $${product1.calculateTotalValue()}`);
console.log(`Total value of ${product2.name}: $${product2.calculateTotalValue()}`);

